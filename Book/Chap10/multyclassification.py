# -*- coding: utf-8 -*-
"""MultyClassification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MeidWeoQhHGvtWsQrVJKql_MSepIM3ee
"""

import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
from keras.layers import Flatten, Dense
import numpy as np
import pandas as pd

(x_train, y_train), (x_test, y_test) = keras.datasets.fashion_mnist.load_data()

print(x_train.shape)
print(x_test.shape)

print(x_train[0].max(), x_train[0].min())

val, _, count = tf.unique_with_counts(y_train)

dict(zip(val.numpy(), count.numpy()))

'''plt.imshow(x_train[10], label = y_train[10])
plt.title(y_train[10])
plt.show()'''

x_val = x_train[:5000]
x_train = x_train[5000:]

y_val = y_train[:5000]
y_train = y_train[5000:]

print(x_train.shape, y_train.shape, x_val.shape, y_val.shape)


def create_model(activation='relu', initializer=None):
    tf.random.set_seed(42)
    np.random.seed(42)
    model = keras.models.Sequential(
        (Flatten(input_shape=[28, 28]),
         Dense(100, activation=activation, kernel_initializer=initializer),
         Dense(300, activation=activation, kernel_initializer=initializer),
         Dense(300, activation=activation, kernel_initializer=initializer),
         Dense(100, activation=activation, kernel_initializer=initializer),
         Dense(10, activation='softmax')
         )
    )
    model.compile(optimizer=keras.optimizers.Adam(), loss=keras.losses.SparseCategoricalCrossentropy(),
                  metrics=['accuracy'])
    return model


model = create_model()
model.summary()

# keras.utils.plot_model(model, show_shapes = True, show_layer_activations = True)

ES = keras.callbacks.EarlyStopping(
    monitor='val_loss',
    patience=5,
    restore_best_weights=True)

history = model.fit(
    x_train, y_train,
    callbacks=[ES],
    validation_data=(x_val, y_val),
    epochs=200)

'''pd.DataFrame(history.history).plot()
plt.grid(True)
plt.show()'''

model.evaluate(x_test, y_test)

"""## Apply normalization to data"""

x_train_norm = x_train / 255.0
x_val_norm = x_val / 255.0
x_test_norm = x_test / 255.0

model2 = create_model()
history2 = model2.fit(
    x_train_norm, y_train,
    callbacks=[ES],
    validation_data=(x_val_norm, y_val),
    epochs=200)

'''pd.DataFrame(history2.history).plot()
plt.grid(True)
plt.show()'''

model2.evaluate(x_test_norm, y_test)
